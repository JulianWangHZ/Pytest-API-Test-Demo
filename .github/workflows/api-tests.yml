name: API Tests

on:
  # 1. Scheduled run - Daily execution (UTC 02:00, Taiwan 10:00)
  schedule:
    - cron: "0 2 * * *"

  # 2. Manual trigger (can run on any branch)
  workflow_dispatch:
    inputs:
      pytest_marks:
        description: 'Pytest marks to run (e.g: smoke, products, "positive")'
        required: false
        default: ""
        type: string
      environment:
        description: "Target environment"
        required: false
        default: "staging"
        type: choice
        options:
          - staging
          - production

# Permissions needed for GitHub Pages deployment
permissions:
  contents: write
  pages: write
  id-token: write
  actions: read

env:
  ENVIRONMENT: production
  BASE_URL: https://fakestoreapi.com
  ALLURE_RESULTS_PATH: allure-results

jobs:
  scheduled-tests:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-env: [production, staging]
        test-suite: [smoke]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Display trigger information
        run: |
          echo "Triggered by: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Runner OS: ${{ runner.os }}"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Scheduled run with matrix:"
          echo "- Environment: ${{ matrix.test-env }}"
          echo "- Test Suite: ${{ matrix.test-suite }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker build -t fakestore-api-tests .
          echo "Docker image built successfully"

      - name: Create reports directory
        run: |
          mkdir -p reports/{allure/{results,reports},html,coverage,logs}
          echo "Reports directory structure created"

      - name: Run API Tests
        env:
          TEST_TYPE: ${{ matrix.test-suite }}
          ENVIRONMENT: ${{ matrix.test-env }}
        run: |
          echo "Running tests with marks: $TEST_TYPE on $ENVIRONMENT environment..."
          docker run --rm \
            -e ENVIRONMENT=$ENVIRONMENT \
            -v $(pwd)/reports:/app/reports \
            fakestore-api-tests pytest -m "$TEST_TYPE" -v --alluredir=/app/reports/allure/results

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-env }}-${{ matrix.test-suite }}
          path: reports/allure/results
          retention-days: 30

  manual-tests:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Display trigger information
        run: |
          echo "Triggered by: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Runner OS: ${{ runner.os }}"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Manual run with options:"
          echo "- Pytest marks: ${{ github.event.inputs.pytest_marks }}"
          echo "- Environment: ${{ github.event.inputs.environment }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker build -t fakestore-api-tests .
          echo "Docker image built successfully"

      - name: Create reports directory
        run: |
          mkdir -p reports/{allure/{results,reports},html,coverage,logs}
          echo "Reports directory structure created"

      - name: Run API Tests
        env:
          TEST_TYPE: ${{ github.event.inputs.pytest_marks }}
          ENVIRONMENT: ${{ github.event.inputs.environment }}
        run: |
          echo "Running tests with marks: $TEST_TYPE on $ENVIRONMENT environment..."
          docker run --rm \
            -e ENVIRONMENT=$ENVIRONMENT \
            -v $(pwd)/reports:/app/reports \
            fakestore-api-tests pytest -m "$TEST_TYPE" -v --alluredir=/app/reports/allure/results

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-manual
          path: reports/allure/results
          retention-days: 30

  # Common steps for all jobs
  generate-report:
    needs: [scheduled-tests, manual-tests]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          path: reports/allure/results
          pattern: test-results-*
          merge-multiple: true

      - name: Set report date env
        run: |
          # Set timezone to Asia/Taipei
          export TZ='Asia/Taipei'
          echo "REPORT_DATE=$(date +'%Y-%m-%d-%H-%M')" >> $GITHUB_ENV

      - name: Create reports directory structure
        run: |
          mkdir -p reports/allure/reports
          echo "Reports directory structure created"

      - name: Clean old Allure reports (keep 60 days)
        run: |
          REPORTS_DIR=reports/allure/reports
          find $REPORTS_DIR -maxdepth 1 -type d -name '20*' -mtime +60 -exec rm -rf {} +

      - name: Generate Allure Report
        uses: simple-elf/allure-report-action@master
        with:
          allure_results: reports/allure/results
          allure_report: reports/allure/reports/${{ env.REPORT_DATE }}
          keep_reports: 20

      - name: Generate Allure Index Page
        run: |
          REPORTS_DIR=reports/allure/reports
          REPORTS_JSON=$REPORTS_DIR/reports.json
          # generate reports.json
          echo "[" > $REPORTS_JSON
          first=1
          for d in $REPORTS_DIR/20*/ ; do
            dname=$(basename "$d")
            date_fmt=$(echo $dname | cut -d'-' -f1-3)
            if [ $first -eq 0 ]; then echo "," >> $REPORTS_JSON; fi
            echo "{\"date\": \"${date_fmt}\", \"folder\": \"${dname}\"}" >> $REPORTS_JSON
            first=0
          done
          echo "]" >> $REPORTS_JSON

          # generate interactive calendar homepage index.html
          INDEX_FILE=$REPORTS_DIR/index.html
          cat > $INDEX_FILE << 'EOL'
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Allure Reports</title>
  <style>
    body {
      background: linear-gradient(45deg, #f86a6c 0%, #fd588a 100%);
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      margin: 0;
      padding: 0;
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .container {
      background: #fff;
      max-width: 800px;
      margin: 40px auto;
      border-radius: 12px;
      box-shadow: 0 8px 32px rgba(30,46,50,0.18);
      padding: 32px;
    }
    h1 {
      color: #333;
      text-align: center;
      margin-bottom: 32px;
      font-size: 2.5rem;
      font-weight: 600;
    }
    .reports-list {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    .reports-list li {
      margin-bottom: 16px;
    }
    .reports-list a {
      display: block;
      padding: 16px 24px;
      background: #f8f9fa;
      border-radius: 8px;
      color: #333;
      text-decoration: none;
      font-size: 1.1rem;
      transition: all 0.3s ease;
      border: 1px solid #eee;
    }
    .reports-list a:hover {
      background: #fd588a;
      color: #fff;
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(253,88,138,0.2);
    }
    .date-badge {
      display: inline-block;
      padding: 4px 8px;
      background: #ffe3ec;
      color: #fd588a;
      border-radius: 4px;
      font-size: 0.9rem;
      margin-right: 12px;
    }
    .empty-state {
      text-align: center;
      padding: 48px 24px;
      color: #666;
    }
    .empty-state p {
      margin: 16px 0;
      font-size: 1.1rem;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Allure Reports</h1>
    <ul class="reports-list" id="reports-list">
      <!-- Reports will be inserted here by JavaScript -->
    </ul>
  </div>

  <script>
    // Fetch reports data
    fetch("reports.json")
      .then(response => response.json())
      .then(data => {
        const reportsList = document.getElementById("reports-list");
        if (data.length === 0) {
          reportsList.innerHTML = `
            <div class="empty-state">
              <p>No reports available yet.</p>
            </div>
          `;
          return;
        }
        
        // Sort reports by date (newest first)
        data.sort((a, b) => new Date(b.date) - new Date(a.date));
        
        // Generate list items
        reportsList.innerHTML = data.map(report => `
          <li>
            <a href="./${report.folder}/">
              <span class="date-badge">${report.date}</span>
              ${report.folder}
            </a>
          </li>
        `).join("");
      })
      .catch(error => {
        console.error("Error loading reports:", error);
        document.getElementById("reports-list").innerHTML = `
          <div class="empty-state">
            <p>Error loading reports. Please try again later.</p>
          </div>
        `;
      });
  </script>
</body>
</html>
EOL

      - name: Deploy to Netlify (date version)
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: reports/allure/reports/${{ env.REPORT_DATE }}
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy Allure report ${{ env.REPORT_DATE }}"
          enable-pull-request-comment: true
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Deploy Allure Index to Netlify Root
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: reports/allure/reports
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy Allure index page"
          enable-pull-request-comment: false
          enable-commit-comment: false
          overwrites-pull-request-comment: false
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Test Results Summary
        run: |
          echo "## API Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Reports" >> $GITHUB_STEP_SUMMARY
          echo "- [Allure Report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/allure-report/)" >> $GITHUB_STEP_SUMMARY
          echo "- [Test Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

  # Additional parallel job: Generate test insights
  test-insights:
    runs-on: ubuntu-latest
    needs: generate-report
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate Test Insights
        run: |
          echo "## Test Execution Insights" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Workflow Duration**: ${{ github.event.repository.updated_at }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Runner**: ubuntu-latest" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker**: Yes" >> $GITHUB_STEP_SUMMARY
          echo "- **Parallel Execution**: Yes (Matrix Strategy)" >> $GITHUB_STEP_SUMMARY
          echo "- **Report Generation**: Allure + GitHub Pages" >> $GITHUB_STEP_SUMMARY
